{
  "openapi": "3.0.0",
  "info": {
    "title": "Telegram Authorization Service",
    "version": "1.0.0"
  },
  "paths": {
    "/login": {
      "post": {
        "summary": "Login using Telegram credentials",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Invalid user hash",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Get user details",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "409": {
            "description": "User not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/refresh": {
      "get": {
        "summary": "Refresh user tokens",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "404": {
            "description": "Refresh token not found or user not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/update-meta": {
      "put": {
        "summary": "Update user meta information",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMetaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "409": {
            "description": "User not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/logout": {
      "get": {
        "summary": "Logout user",
        "responses": {
          "200": {
            "description": "Successful logout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/login/web-app": {
      "post": {
        "tags": ["auth"],
        "summary": "Login with Telegram Web App data",
        "description": "Authenticate a user with Telegram Web App credentials",
        "operationId": "loginWebApp",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TelegramWebAppLoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "accessToken=xyz; refreshToken=abc"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Invalid signature"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["users"],
        "summary": "List users with optional search and pagination",
        "description": "Retrieves a list of users. Requires admin privileges. Supports pagination and search by first or last name.",
        "operationId": "listUsers",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to skip for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10,
              "minimum": 1
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter users by first name or last name (case-insensitive)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters (e.g., offset, limit)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 123456789
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "username": {
            "type": "string",
            "example": "johndoe"
          },
          "photoUrl": {
            "type": "string",
            "example": "https://example.com/photo.jpg"
          },
          "authDate": {
            "type": "integer",
            "example": 1620000000
          },
          "hash": {
            "type": "string",
            "example": "abcdef123456"
          }
        },
        "required": ["id", "firstName", "authDate", "hash"]
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "photoUrl": {
            "type": "string"
          },
          "authDate": {
            "type": "integer"
          },
          "hash": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "oneOf": [{ "type": "string" }, { "type": "number" }]
            },
            "description": "User metadata where keys are strings and values can be strings or numbers."
          }
        }
      },
      "UpdateMetaRequest": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "additionalProperties": {
              "oneOf": [{ "type": "string" }, { "type": "number" }]
            },
            "description": "User metadata where keys are strings and values can be strings or numbers."
          }
        },
        "required": ["meta"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Error message"
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User logged out successfully"
          }
        }
      },
      "TelegramWebAppLoginRequest": {
        "type": "object",
        "required": ["queryId", "user", "authDate", "signature"],
        "properties": {
          "queryId": {
            "type": "string",
            "example": "AAEXTKEWAAAAABdMoRawpVCK"
          },
          "user": {
            "type": "string",
            "description": "JSON string containing user information",
            "example": "{\"id\":379669527,\"first_name\":\"eugen\",\"last_name\":\"\",\"username\":\"theguriev\",\"language_code\":\"en\",\"allows_write_to_pm\":true,\"photo_url\":\"https://t.me/i/userpic/320/example.jpg\"}"
          },
          "authDate": {
            "type": "integer",
            "example": 1745179538
          },
          "signature": {
            "type": "string",
            "example": "zQf7zeXzKVekQpFT8Zxuf7_gxIuj3xAdo1ZtZn2_gEP4lHJgt0KUeBIEH6iAJp--n56H7ZHXYxco1zpW2a5CAA"
          },
          "hash": {
            "type": "string",
            "example": "217946472939261db8e248b313882b9ab3ed4e7ce5f1de25996d51aba52a1bfc"
          }
        }
      }
    },
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "accessToken"
      }
    }
  }
}
